{"version":3,"sources":["logo.svg","utils/network.js","components/InputPage/InputPage.js","components/ViewPage/ViewPage.js","components/ExpectedGuestsPage/ExpectedGuestsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","postData","a","url","data","fetch","method","headers","body","JSON","stringify","response","json","useStyles","makeStyles","theme","container","position","width","height","backgroundColor","alignContent","justifyContent","color","gridCellCentered","display","textField","borderColor","borderWidth","links","InputPage","useState","sending","setSending","error","setError","success","setSuccess","classes","inputRef","React","createRef","addGuest","inputElement","current","guestIdNumber","value","guestId","Fragment","className","columns","rows","areas","area","to","onSubmit","e","preventDefault","TextField","id","label","margin","variant","autoFocus","onClick","style","CircularProgress","ViewPage","setData","useEffect","results","fetchData","length","filterable","defaultFilterMethod","filter","row","String","includes","Header","accessor","filterMethod","startsWith","defaultPageSize","ViewExpectedPage","expected","setExpected","currentGuests","setCurrentGuests","map","g","arrived","some","cg","Cell","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.573dc9f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const postData = async (url = '', data = {}) => {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        // mode: 'cors', // no-cors, *cors, same-origin\r\n        // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        // credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        // redirect: 'follow', // manual, *follow, error\r\n        // referrer: 'no-referrer', // no-referrer, *client\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    });\r\n    return await response.json(); // parses JSON response into native JavaScript objects\r\n};","import React, { useState } from 'react';\r\n\r\nimport { postData } from '../../utils/network';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\n\r\nimport { Grid, Cell } from \"styled-css-grid\";\r\n\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#244e7b',\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n        color: 'white'\r\n    },\r\n    gridCellCentered: {\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        display: 'grid',\r\n    },\r\n    textField: {\r\n        '& label, & input': {\r\n            color: 'white',\r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255, 255, 255, 0.23)',\r\n        },\r\n        '& .MuiOutlinedInput-root.Mui-focused': {\r\n            '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'white',\r\n                borderWidth: '2px',\r\n            },\r\n        },\r\n        '& .MuiFormLabel-root.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiOutlinedInput-root:hover': {\r\n            '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'rgba(255, 255, 255, 0.87)',\r\n            }\r\n        }\r\n    },\r\n    links: {\r\n        '& a': {\r\n            color: 'white',\r\n        },\r\n        '& a:visited': {\r\n            color: 'white'\r\n        }\r\n    }\r\n}));\r\n\r\nconst InputPage = () => {\r\n    const [sending, setSending] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(false);\r\n    let classes = useStyles();\r\n\r\n    let inputRef = React.createRef();\r\n\r\n    const addGuest = async () => {\r\n        setSending(true);\r\n        setSuccess(false);\r\n        setError(false);\r\n\r\n        let inputElement = inputRef.current;\r\n        let guestIdNumber = inputRef.current.value;\r\n        let response;\r\n        try {\r\n            response = await postData('https://entrance-monitor-server.herokuapp.com/addGuest', { guestId: guestIdNumber });\r\n        }\r\n        catch (e) {\r\n            setError(true);\r\n        }\r\n        setSending(false);\r\n        if (response == null || !response.success)\r\n            setError(true);\r\n        else\r\n            setSuccess(true);\r\n\r\n        inputElement.value = \"\";\r\n\r\n        // console.log(response);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid className={classes.container} columns='1fr auto 1fr' rows='1fr auto auto 1fr' areas={['nav title .', '. form hiddenSubmit', '. loader .', '. . .']}>\r\n                <Cell area=\"nav\" className={classes.links}>\r\n                    <Link to=\"/viewGuests\"> View Guests </Link> <br />\r\n                    <Link to=\"/viewExpected\"> Expected </Link>\r\n                </Cell>\r\n                <Cell area=\"title\">\r\n                    Entrance Monitoring System\r\n                </Cell>\r\n                <Cell area=\"form\">\r\n                    <form onSubmit={(e) => { e.preventDefault(); addGuest(); }}>\r\n                        <TextField\r\n                            id=\"outlined-required\"\r\n                            label=\"Guest ID\"\r\n                            // defaultValue=\"Hello World\"\r\n                            className={classes.textField}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            inputRef={inputRef}\r\n                            autoFocus\r\n                        />\r\n                        {/* <input ref={inputRef} autoFocus /> */}\r\n                    </form>\r\n                </Cell>\r\n                <Cell area=\"hiddenSubmit\" onClick={() => addGuest()}>\r\n\r\n                </Cell>\r\n                <Cell area=\"loader\" className={classes.gridCellCentered}>\r\n                    {\r\n                        error ?\r\n                            (\r\n                                <div style={{ color: 'red' }}> <ErrorOutlineIcon /> </div>\r\n                            )\r\n                            : null\r\n                    }\r\n                    {\r\n                        sending ?\r\n                            (\r\n                                <CircularProgress color=\"inherit\" />\r\n                            )\r\n                            : null\r\n                    }\r\n                    {\r\n                        success ?\r\n                            (\r\n                                <div style={{ color: 'lime' }}>\r\n                                    <CheckCircleOutlineIcon />\r\n                                </div>\r\n                            )\r\n                            : null\r\n                    }\r\n                </Cell>\r\n            </Grid>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default InputPage;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { postData } from '../../utils/network';\r\n\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst ViewPage = () => {\r\n    const [data, setData] = useState(null);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!data) {\r\n                let response = await postData('https://entrance-monitor-server.herokuapp.com/allGuests');\r\n                setData(response.results);\r\n            }\r\n        };\r\n        fetchData();\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data ?\r\n                    <React.Fragment>\r\n                        <Link to=\"/\"> Add Guest </Link> <br />\r\n                        <Link to=\"/viewExpected\"> Expected </Link> <br />\r\n                        {/* <Link to=\"/extras\"> Unexpected Guests </Link> <br/> */}\r\n\r\n                        <br />\r\n\r\n                        <div>\r\n                            Total Guests: {data.length}\r\n                        </div>\r\n\r\n                        <ReactTable\r\n                            data={data}\r\n                            filterable\r\n                            defaultFilterMethod={(filter, row) =>\r\n                                String(row[filter.id]).includes(filter.value)}\r\n                            columns={[\r\n                                {\r\n                                    Header: \"DB Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"ID\",\r\n                                            accessor: \"id\"\r\n                                        },\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    Header: \"Guest Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"Personal Number\",\r\n                                            accessor: \"guest_id\",\r\n                                            filterMethod: (filter, row) =>\r\n                                                row[filter.id].startsWith(filter.value)\r\n                                        },\r\n                                        {\r\n                                            Header: \"Name\",\r\n                                            accessor: \"guest_name\"\r\n                                        },\r\n                                    ]\r\n                                },\r\n                            ]}\r\n                            defaultPageSize={10}\r\n                            className=\"-striped -highlight\"\r\n                        />\r\n                    </React.Fragment>\r\n                    : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewPage;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { postData } from '../../utils/network';\r\n\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst ViewExpectedPage = () => {\r\n    const [data, setData] = useState(null);\r\n    const [expected, setExpected] = useState(null);\r\n    const [currentGuests, setCurrentGuests] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!expected) {\r\n                let response = await postData('https://entrance-monitor-server.herokuapp.com/allExpectedGuests');\r\n                setExpected(response.results);\r\n            }\r\n        };\r\n        fetchData();\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!currentGuests) {\r\n                let response = await postData('https://entrance-monitor-server.herokuapp.com/allGuests');\r\n                setCurrentGuests(response.results);\r\n            }\r\n        };\r\n        fetchData();\r\n    });\r\n\r\n    if (expected && currentGuests && !data) {\r\n        let currentData = expected.map((g) => {\r\n            return { ...g, arrived: currentGuests.some((cg) => cg['guest_id'] === g['guest_id']) };\r\n        });\r\n\r\n        setData(currentData);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data ?\r\n                    <React.Fragment>\r\n                        <Link to=\"/\"> Add Guest </Link> <br />\r\n                        <Link to=\"/viewGuests\"> View Guests </Link> <br />\r\n                        {/* <Link to=\"/extras\"> Unexpected Guests </Link> <br /> */}\r\n\r\n                        <br />\r\n\r\n                        <div>\r\n                            Total Guests: {data.filter((g) => g.arrived).length} / {data.length}\r\n                        </div>\r\n\r\n                        <ReactTable\r\n                            data={data}\r\n                            filterable\r\n                            defaultFilterMethod={(filter, row) =>\r\n                                String(row[filter.id]).includes(filter.value)}\r\n                            columns={[\r\n                                {\r\n                                    Header: \"DB Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"ID\",\r\n                                            accessor: \"id\"\r\n                                        },\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    Header: \"Guest Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"Personal Number\",\r\n                                            accessor: \"guest_id\",\r\n                                            filterMethod: (filter, row) =>\r\n                                                row[filter.id].startsWith(filter.value)\r\n                                        },\r\n                                        {\r\n                                            Header: \"Name\",\r\n                                            accessor: \"guest_name\"\r\n                                        },\r\n                                        {\r\n                                            Header: \"Arrived\",\r\n                                            accessor: \"arrived\",\r\n                                            Cell: row => (\r\n                                                <span>\r\n                                                    <span style={{\r\n                                                        color: row.value ? '#57d500'\r\n                                                            : '#ff2e00',\r\n                                                    }}>\r\n                                                        &#x25cf;\r\n                                                  </span> {\r\n                                                        row.value ? 'Yes'\r\n                                                            : 'No'\r\n                                                    }\r\n                                                </span>\r\n                                            )\r\n                                        },\r\n                                    ]\r\n                                },\r\n                            ]}\r\n                            defaultPageSize={10}\r\n                            className=\"-striped -highlight\"\r\n                        />\r\n                    </React.Fragment>\r\n                    : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewExpectedPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\nimport InputPage from './components/InputPage/InputPage';\nimport ViewPage from './components/ViewPage/ViewPage';\nimport ViewExpectedPage from './components/ExpectedGuestsPage/ExpectedGuestsPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"client/\">\n        <InputPage />\n      </Route>\n      <Route exact path=\"client/viewGuests\">\n        <ViewPage />\n      </Route>\n      <Route exact path=\"client/viewExpected\">\n        <ViewExpectedPage />\n      </Route>\n    </Router>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}