{"version":3,"sources":["utils/network.js","components/InputPage/InputPage.js","components/ViewPage/ViewPage.js","components/ExpectedGuestsPage/ExpectedGuestsPage.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["postData","a","async","url","data","fetch","method","headers","body","JSON","stringify","response","json","useStyles","makeStyles","theme","container","position","width","height","backgroundColor","alignContent","justifyContent","color","gridCellCentered","display","textField","borderColor","borderWidth","links","indicatorsCell","focusLockCell","justifyItems","alignItems","link","cursor","textDecoration","InputPage","useState","sending","setSending","error","setError","success","setSuccess","offlineMode","setOfflineMode","focusLock","setFocusLock","classes","useEffect","initBacklog","localStorage","getItem","length","sendBacklog","inputRef","React","createRef","addGuest","inputElement","current","guestId","value","Axios","timeout","then","focus","catch","e","saveGuestToBacklog","finally","guest","currentBacklog","parse","find","g","push","arrival_time","Date","toISOString","setItem","requests","forEach","all","spread","responses","every","res","submitForm","preventDefault","match","focusLockHandler","inputEle","setTimeout","console","log","Fragment","className","columns","rows","areas","area","to","onSubmit","TextField","id","label","margin","variant","autoFocus","disabled","inputProps","onBlur","onClick","Switch","checked","onChange","style","CircularProgress","ViewPage","setData","results","fetchData","filterable","defaultFilterMethod","filter","row","String","includes","Header","accessor","filterMethod","startsWith","Cell","toLocaleTimeString","defaultPageSize","ViewExpectedPage","temp","expected","setExpected","currentGuests","setCurrentGuests","map","arrived","some","cg","guest_id","App","exact","path","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.33ca3008.chunk.js","sourcesContent":["export const postData = async (url = '', data = {}) => {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        // mode: 'cors', // no-cors, *cors, same-origin\r\n        // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        // credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        // redirect: 'follow', // manual, *follow, error\r\n        // referrer: 'no-referrer', // no-referrer, *client\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    });\r\n    return await response.json(); // parses JSON response into native JavaScript objects\r\n};","import React, { useState, useEffect } from 'react';\r\n\r\nimport { postData } from '../../utils/network';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { Grid, Cell } from \"styled-css-grid\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Axios from 'axios';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#244e7b',\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n        color: 'white'\r\n    },\r\n    gridCellCentered: {\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        display: 'grid',\r\n    },\r\n    textField: {\r\n        '& label, & input': {\r\n            color: 'white',\r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255, 255, 255, 0.23)',\r\n        },\r\n        '& .MuiOutlinedInput-root.Mui-focused': {\r\n            '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'white',\r\n                borderWidth: '2px',\r\n            },\r\n        },\r\n        '& .MuiFormLabel-root.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiOutlinedInput-root:hover': {\r\n            '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'rgba(255, 255, 255, 0.87)',\r\n            }\r\n        }\r\n    },\r\n    links: {\r\n        '& a': {\r\n            color: 'white',\r\n        },\r\n        '& a:visited': {\r\n            color: 'white'\r\n        }\r\n    },\r\n    indicatorsCell: {\r\n        display: 'grid',\r\n        justifyContent: 'right',\r\n    },\r\n    focusLockCell: {\r\n        display: 'grid',\r\n        justifyItems: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    link: {\r\n        cursor: 'pointer',\r\n        textDecoration: 'underline',\r\n    },\r\n}));\r\n\r\nconst InputPage = () => {\r\n    const [sending, setSending] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(false);\r\n    const [offlineMode, setOfflineMode] = useState(false);\r\n    const [focusLock, setFocusLock] = useState(true);\r\n    let classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        let initBacklog = localStorage.getItem('guestsBacklog');\r\n        if (initBacklog && initBacklog.length > 0)\r\n            sendBacklog();\r\n    }, []);\r\n\r\n    let inputRef = React.createRef();\r\n\r\n    const addGuest = async (data) => {\r\n        setSending(true);\r\n        setSuccess(false);\r\n        setError(false);\r\n\r\n        let inputElement = inputRef.current;\r\n        if (data == null)\r\n            data = {\r\n                guestId: inputRef.current.value\r\n            };\r\n\r\n        return Axios({\r\n            method: 'post',\r\n            url: 'https://entrance-monitor.azurewebsites.net/addGuest',\r\n            timeout: 5000,\r\n            data,\r\n        })\r\n            .then(function (response) {\r\n                setSending(false);\r\n                if (response.data == null || !response.data.success)\r\n                    setError(true);\r\n                else\r\n                    setSuccess(true);\r\n\r\n                inputElement.value = \"\";\r\n                inputElement.focus();\r\n                if (offlineMode)\r\n                    setOfflineMode(false);\r\n\r\n                return response.data;\r\n            })\r\n            .catch((e) => {\r\n                setError(true);\r\n                setOfflineMode(true);\r\n                saveGuestToBacklog({ guestId: data.guestId });\r\n                inputElement.value = \"\";\r\n\r\n                return { success: false };\r\n            })\r\n            .finally(() => {\r\n                setSending(false);\r\n            });\r\n    };\r\n\r\n    const saveGuestToBacklog = (guest = {}) => {\r\n        // 2019-12-13 18:57:09.9575+00\r\n        let { guestId } = guest;\r\n\r\n        setSending(true);\r\n        setSuccess(false);\r\n        setError(false);\r\n\r\n        if (guestId == null)\r\n            guestId = inputRef.current.value;\r\n\r\n        let currentBacklog = JSON.parse(localStorage.getItem('guestsBacklog'));\r\n        if (currentBacklog == null)\r\n            currentBacklog = [];\r\n\r\n        if (currentBacklog.find((g) => g.guestId === guestId) == null) {\r\n            currentBacklog.push({\r\n                guestId,\r\n                arrival_time: new Date().toISOString(),\r\n            });\r\n\r\n            localStorage.setItem('guestsBacklog', JSON.stringify(currentBacklog));\r\n        }\r\n\r\n        setSending(false);\r\n        setSuccess(true);\r\n        // setError(false);\r\n\r\n        if (inputRef.current)\r\n            inputRef.current.value = \"\";\r\n    }\r\n\r\n    const sendBacklog = () => {\r\n        let currentBacklog = JSON.parse(localStorage.getItem('guestsBacklog'));\r\n        if (currentBacklog == null)\r\n            return;\r\n\r\n        let requests = [];\r\n        currentBacklog.forEach(async (g) => {\r\n            requests.push(addGuest(g));\r\n        });\r\n\r\n        Axios.all(requests).then(Axios.spread((...responses) => {\r\n            if (responses.every((res) => res && res.success)) {\r\n                localStorage.setItem('guestsBacklog', JSON.stringify([]));\r\n            }\r\n        }));\r\n    }\r\n\r\n    const submitForm = (e) => {\r\n        if (e)\r\n            e.preventDefault();\r\n\r\n        if (inputRef.current && inputRef.current.value !== \"\") {\r\n            let match = inputRef.current.value.match(/\\D/);\r\n            if (match && match.length > 0) {\r\n                setError(true);\r\n                setSuccess(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (offlineMode)\r\n            saveGuestToBacklog()\r\n        else\r\n            addGuest();\r\n    };\r\n\r\n    const focusLockHandler = () => {\r\n        if (!focusLock)\r\n            return;\r\n\r\n        let inputEle = inputRef.current;\r\n\r\n        if (inputEle != null) {\r\n            setTimeout(() => inputEle.focus(), 1);\r\n            console.log('focused!');\r\n        }\r\n    };\r\n\r\n    if (focusLock)\r\n        setTimeout(() => focusLockHandler(), 1);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid className={classes.container} columns='1fr auto 1fr' rows='1fr auto auto 1fr' areas={['nav title indicators', 'focusLock form hiddenSubmit', '. loader .', '. . .']}>\r\n                <Cell area=\"nav\" className={classes.links}>\r\n                    <Link to=\"/client/viewGuests\"> View Guests </Link> <br />\r\n                    <Link to=\"/client/viewExpected\"> Expected </Link>\r\n                </Cell>\r\n                <Cell area=\"title\">\r\n                    Entrance Monitoring System\r\n                </Cell>\r\n                <Cell area=\"form\">\r\n                    <form onSubmit={submitForm}>\r\n                        <TextField\r\n                            id=\"outlined-required\"\r\n                            label=\"Guest ID\"\r\n                            // defaultValue=\"Hello World\"\r\n                            className={classes.textField}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            inputRef={inputRef}\r\n                            autoFocus\r\n                            disabled={sending}\r\n                            inputProps={{\r\n                                onBlur: focusLockHandler,\r\n                            }}\r\n                        />\r\n                        {/* <input ref={inputRef} autoFocus /> */}\r\n                    </form>\r\n                </Cell>\r\n                <Cell area=\"indicators\" className={classes.indicatorsCell}>\r\n                    <div>\r\n                        {\r\n                            offlineMode ? (\r\n                                <div> Offline, try <span onClick={sendBacklog} className={classes.link}> reconnecting </span> </div>\r\n                            ) : null\r\n                        }\r\n                    </div>\r\n                </Cell>\r\n                <Cell area=\"focusLock\" className={classes.focusLockCell}>\r\n                    Focus lock\r\n                    <Switch\r\n                        checked={focusLock}\r\n                        onChange={() => setFocusLock(!focusLock)}\r\n                        value=\"focusLock\"\r\n                        color=\"secondary\"\r\n                    />\r\n                </Cell>\r\n                <Cell area=\"hiddenSubmit\" onClick={submitForm}>\r\n\r\n                </Cell>\r\n                <Cell area=\"loader\" className={classes.gridCellCentered}>\r\n                    {\r\n                        error ?\r\n                            (\r\n                                <div style={{ color: 'red' }}> <ErrorOutlineIcon /> </div>\r\n                            )\r\n                            : null\r\n                    }\r\n                    {\r\n                        sending ?\r\n                            (\r\n                                <CircularProgress color=\"inherit\" />\r\n                            )\r\n                            : null\r\n                    }\r\n                    {\r\n                        success ?\r\n                            (\r\n                                <div style={{ color: `${offlineMode ? 'orange' : 'lime'}` }}>\r\n                                    <CheckCircleOutlineIcon />\r\n                                </div>\r\n                            )\r\n                            : null\r\n                    }\r\n                </Cell>\r\n            </Grid>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default InputPage;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { postData } from '../../utils/network';\r\n\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst ViewPage = () => {\r\n    const [data, setData] = useState(null);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!data) {\r\n                let response = await postData('https://entrance-monitor.azurewebsites.net/allGuests');\r\n                setData(response.results);\r\n            }\r\n        };\r\n        fetchData();\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data ?\r\n                    <React.Fragment>\r\n                        <Link to=\"/client/\"> Add Guest </Link> <br />\r\n                        <Link to=\"/client/viewExpected\"> Expected </Link> <br />\r\n                        {/* <Link to=\"/extras\"> Unexpected Guests </Link> <br/> */}\r\n\r\n                        <br />\r\n\r\n                        <div>\r\n                            Total Guests: {data.length}\r\n                        </div>\r\n\r\n                        <ReactTable\r\n                            data={data}\r\n                            filterable\r\n                            defaultFilterMethod={(filter, row) =>\r\n                                String(row[filter.id]).includes(filter.value)}\r\n                            columns={[\r\n                                {\r\n                                    Header: \"DB Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"ID\",\r\n                                            accessor: \"id\"\r\n                                        },\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    Header: \"Guest Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"Personal Number\",\r\n                                            accessor: \"guest_id\",\r\n                                            filterMethod: (filter, row) =>\r\n                                                row[filter.id].startsWith(filter.value)\r\n                                        },\r\n                                        {\r\n                                            Header: \"Name\",\r\n                                            accessor: \"guest_name\"\r\n                                        },\r\n                                        {\r\n                                            Header: \"Rank\",\r\n                                            accessor: \"rank\"\r\n                                        },\r\n                                        {\r\n                                            Header: \"Unit\",\r\n                                            accessor: \"unit\"\r\n                                        },\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    Header: \"Arrival Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"Arrival Time\",\r\n                                            accessor: \"arrival_time\",\r\n                                            Cell: row => (\r\n                                                <span>\r\n                                                    {\r\n                                                        row.value ? new Date(row.value).toLocaleTimeString()\r\n                                                            : null\r\n                                                    }\r\n                                                </span>\r\n                                            )\r\n                                        },\r\n                                    ]\r\n                                },\r\n                            ]}\r\n                            defaultPageSize={10}\r\n                            className=\"-striped -highlight\"\r\n                        />\r\n                    </React.Fragment>\r\n                    : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewPage;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { postData } from '../../utils/network';\r\n\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst ViewExpectedPage = () => {\r\n    const [data, setData] = useState(null);\r\n    const [expected, setExpected] = useState(null);\r\n    const [currentGuests, setCurrentGuests] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!expected) {\r\n                let response = await postData('https://entrance-monitor.azurewebsites.net/allExpectedGuests');\r\n                setExpected(response.results);\r\n            }\r\n        };\r\n        fetchData();\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!currentGuests) {\r\n                let response = await postData('https://entrance-monitor.azurewebsites.net/allGuests');\r\n                setCurrentGuests(response.results);\r\n            }\r\n        };\r\n        fetchData();\r\n    });\r\n\r\n    let temp;\r\n    if (expected && currentGuests && !data) {\r\n        let currentData = expected.map((g) => {\r\n            return {\r\n                ...g,\r\n                arrived: currentGuests.some((cg) => cg['guest_id'] === g['guest_id']),\r\n                arrival_time: (temp = currentGuests.find((cg) => g.guest_id === cg.guest_id)) != null ? temp.arrival_time : null,\r\n            };\r\n        });\r\n\r\n        setData(currentData);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data ?\r\n                    <React.Fragment>\r\n                        <Link to=\"/client/\"> Add Guest </Link> <br />\r\n                        <Link to=\"/client/viewGuests\"> View Guests </Link> <br />\r\n                        {/* <Link to=\"/extras\"> Unexpected Guests </Link> <br /> */}\r\n\r\n                        <br />\r\n\r\n                        <div>\r\n                            Total Guests: {data.filter((g) => g.arrived).length} / {data.length}\r\n                        </div>\r\n\r\n                        <ReactTable\r\n                            data={data}\r\n                            filterable\r\n                            defaultFilterMethod={(filter, row) =>\r\n                                String(row[filter.id]).includes(filter.value)}\r\n                            columns={[\r\n                                {\r\n                                    Header: \"DB Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"ID\",\r\n                                            accessor: \"id\"\r\n                                        },\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    Header: \"Guest Info\",\r\n                                    columns: [\r\n                                        {\r\n                                            Header: \"Personal Number\",\r\n                                            accessor: \"guest_id\",\r\n                                            filterMethod: (filter, row) =>\r\n                                                String(row[filter.id]).startsWith(filter.value)\r\n                                        },\r\n                                        {\r\n                                            Header: \"Name\",\r\n                                            accessor: \"guest_name\"\r\n                                        },\r\n                                        {\r\n                                            Header: \"Rank\",\r\n                                            accessor: \"rank\"\r\n                                        },\r\n                                        {\r\n                                            Header: \"Unit\",\r\n                                            accessor: \"unit\"\r\n                                        },\r\n                                        {\r\n                                            Header: \"Arrived\",\r\n                                            accessor: \"arrival_time\",\r\n                                            Cell: row => (\r\n                                                <span>\r\n                                                    <span style={{\r\n                                                        color: row.value ? '#57d500'\r\n                                                            : '#ff2e00',\r\n                                                    }}>\r\n                                                        &#x25cf;\r\n                                                  </span> {\r\n                                                        row.value ? 'Yes ' + new Date(row.value).toLocaleTimeString()\r\n                                                            : 'No'\r\n                                                    }\r\n                                                </span>\r\n                                            )\r\n                                        },\r\n                                    ]\r\n                                },\r\n                            ]}\r\n                            defaultPageSize={10}\r\n                            className=\"-striped -highlight\"\r\n                        />\r\n                    </React.Fragment>\r\n                    : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewExpectedPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\nimport InputPage from './components/InputPage/InputPage';\nimport ViewPage from './components/ViewPage/ViewPage';\nimport ViewExpectedPage from './components/ExpectedGuestsPage/ExpectedGuestsPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/client/\">\n        <InputPage />\n      </Route>\n      <Route exact path=\"/client/viewGuests\">\n        <ViewPage />\n      </Route>\n      <Route exact path=\"/client/viewExpected\">\n        <ViewExpectedPage />\n      </Route>\n      {/* <Route path=\"/\">\n        {\n          (props) => {\n            return props.location.pathname + \" not found...\"\n          }\n        }\n      </Route> */}\n    </Router>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}