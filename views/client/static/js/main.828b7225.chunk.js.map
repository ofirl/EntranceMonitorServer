{"version":3,"sources":["utils/network.js","components/InputPage/InputPage.js","components/ViewPage/ViewPage.js","components/ExpectedGuestsPage/ExpectedGuestsPage.js","components/LoginPage/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["SERVER_BASE_URL","postData","a","url","data","fetch","method","credentials","headers","body","JSON","stringify","response","result","json","useStyles","makeStyles","theme","container","position","width","height","backgroundColor","alignContent","justifyContent","color","gridCellCentered","display","textField","borderColor","borderWidth","links","indicatorsCell","focusLockCell","justifyItems","alignItems","link","cursor","textDecoration","InputPage","useState","sending","setSending","error","setError","success","setSuccess","offlineMode","focusLock","setFocusLock","classes","useEffect","initBacklog","localStorage","getItem","length","sendBacklog","inputRef","React","createRef","addGuest","inputElement","current","guestId","value","Axios","timeout","then","focus","catch","e","finally","currentBacklog","parse","requests","forEach","g","push","all","spread","responses","every","res","setItem","submitForm","preventDefault","match","guest","find","arrival_time","Date","toISOString","saveGuestToBacklog","focusLockHandler","inputEle","setTimeout","console","log","Fragment","className","columns","rows","areas","area","to","onSubmit","TextField","id","label","margin","variant","autoFocus","disabled","inputProps","onBlur","style","fontSize","onClick","document","getElementById","innerHTML","Switch","checked","onChange","CircularProgress","ViewPage","setData","results","fetchData","filterable","defaultFilterMethod","filter","row","String","includes","Header","accessor","filterMethod","startsWith","Cell","toLocaleTimeString","defaultPageSize","ViewExpectedPage","temp","expected","setExpected","currentGuests","setCurrentGuests","map","arrived","some","cg","guest_id","LoginPage","verify","useRef","password","ref","type","App","verified","setVerified","verifyToken","status","exact","path","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.828b7225.chunk.js","sourcesContent":["export const SERVER_BASE_URL = 'https://entrance-monitor-server-dev.azurewebsites.net';\n// export const SERVER_BASE_URL = 'https://localhost:8080';\n\nexport const postData = async (url = '', data = {}) => {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        // mode: 'cors', // no-cors, *cors, same-origin\n        // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        // credentials: 'same-origin', // include, *same-origin, omit\n        credentials: \"include\",\n        headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        // redirect: 'follow', // manual, *follow, error\n        // referrer: 'no-referrer', // no-referrer, *client\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    let result = {};\n    try {\n        result = await response.json(); // parses JSON response into native JavaScript objects\n    }\n    catch (e) {\n\n    }\n    return result;\n};","import React, { useState, useEffect } from 'react';\n\nimport { SERVER_BASE_URL } from '../../utils/network';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport Switch from '@material-ui/core/Switch';\n\nimport { Grid, Cell } from \"styled-css-grid\";\n\nimport { Link } from \"react-router-dom\";\n\nimport Axios from 'axios';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#244e7b',\n        alignContent: 'center',\n        justifyContent: 'center',\n        color: 'white'\n    },\n    gridCellCentered: {\n        justifyContent: 'center',\n        alignContent: 'center',\n        display: 'grid',\n    },\n    textField: {\n        '& label, & input': {\n            color: 'white',\n        },\n        '& fieldset': {\n            borderColor: 'rgba(255, 255, 255, 0.23)',\n        },\n        '& .MuiOutlinedInput-root.Mui-focused': {\n            '& .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'white',\n                borderWidth: '2px',\n            },\n        },\n        '& .MuiFormLabel-root.Mui-focused': {\n            color: 'white',\n        },\n        '& .MuiOutlinedInput-root:hover': {\n            '& .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 255, 255, 0.87)',\n            }\n        }\n    },\n    links: {\n        '& a': {\n            color: 'white',\n        },\n        '& a:visited': {\n            color: 'white'\n        }\n    },\n    indicatorsCell: {\n        display: 'grid',\n        justifyContent: 'right',\n    },\n    focusLockCell: {\n        display: 'grid',\n        justifyItems: 'center',\n        alignItems: 'center',\n    },\n    link: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n}));\n\nconst InputPage = () => {\n    const [sending, setSending] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(false);\n    const [offlineMode] = useState(false);\n    const [focusLock, setFocusLock] = useState(true);\n    let classes = useStyles();\n\n    useEffect(() => {\n        let initBacklog = localStorage.getItem('guestsBacklog');\n        if (initBacklog && initBacklog.length > 0)\n            sendBacklog();\n            // eslint-disable-next-line\n    }, []);\n\n    let inputRef = React.createRef();\n\n    const addGuest = async (data) => {\n        setSending(true);\n        setSuccess(false);\n        setError(false);\n\n        let inputElement = inputRef.current;\n        if (data == null)\n            data = {\n                guestId: inputRef.current.value\n            };\n\n        return Axios({\n            method: 'post',\n            url: `${SERVER_BASE_URL}/addGuest`,\n            timeout: 5000,\n            data,\n        })\n            .then(function (response) {\n                setSending(false);\n                if (response.data == null || !response.data.success)\n                    setError(true);\n                else\n                    setSuccess(true);\n\n                inputElement.value = \"\";\n                inputElement.focus();\n                // if (offlineMode) {\n                //     setOfflineMode(false);\n                //     setOfflineMode(true);\n                // }\n\n                return response.data;\n            })\n            .catch((e) => {\n                setError(true);\n                // setOfflineMode(true);\n                // saveGuestToBacklog({ guestId: data.guestId });\n                inputElement.value = \"\";\n\n                return { success: false };\n            })\n            .finally(() => {\n                setSending(false);\n            });\n    };\n\n    const saveGuestToBacklog = (guest = {}) => {\n        // 2019-12-13 18:57:09.9575+00\n        let { guestId } = guest;\n\n        setSending(true);\n        setSuccess(false);\n        setError(false);\n\n        if (guestId == null)\n            guestId = inputRef.current.value;\n\n        let currentBacklog = JSON.parse(localStorage.getItem('guestsBacklog'));\n        if (currentBacklog == null)\n            currentBacklog = [];\n\n        if (currentBacklog.find((g) => g.guestId === guestId) == null) {\n            currentBacklog.push({\n                guestId,\n                arrival_time: new Date().toISOString(),\n            });\n\n            localStorage.setItem('guestsBacklog', JSON.stringify(currentBacklog));\n        }\n\n        setSending(false);\n        setSuccess(true);\n        // setError(false);\n\n        if (inputRef.current)\n            inputRef.current.value = \"\";\n    }\n\n    const sendBacklog = () => {\n        let currentBacklog = JSON.parse(localStorage.getItem('guestsBacklog'));\n        if (currentBacklog == null)\n            return;\n\n        let requests = [];\n        currentBacklog.forEach(async (g) => {\n            requests.push(addGuest(g));\n        });\n\n        Axios.all(requests).then(Axios.spread((...responses) => {\n            if (responses.every((res) => res && res.success)) {\n                localStorage.setItem('guestsBacklog', JSON.stringify([]));\n            }\n        }));\n    }\n\n    const submitForm = (e) => {\n        if (e)\n            e.preventDefault();\n\n        if (inputRef.current && inputRef.current.value !== \"\") {\n            let match = inputRef.current.value.match(/\\D/);\n            if (match && match.length > 0) {\n                setError(true);\n                setSuccess(false);\n                return;\n            }\n        }\n\n        if (offlineMode)\n            saveGuestToBacklog()\n        else\n            addGuest();\n    };\n\n    const focusLockHandler = () => {\n        if (!focusLock)\n            return;\n\n        let inputEle = inputRef.current;\n\n        if (inputEle != null) {\n            setTimeout(() => inputEle.focus(), 1);\n            console.log('focused!');\n        }\n    };\n\n    if (focusLock)\n        setTimeout(() => focusLockHandler(), 1);\n\n    return (\n        <React.Fragment>\n            <Grid className={classes.container} columns='1fr auto 1fr' rows='1fr auto auto 1fr' areas={['nav title indicators', 'focusLock form hiddenSubmit', '. loader .', '. . .']}>\n                <Cell area=\"nav\" className={classes.links}>\n                    <Link to=\"/client/viewGuests\"> View Guests </Link> <br />\n                    <Link to=\"/client/viewExpected\"> Expected </Link>\n                </Cell>\n                <Cell area=\"title\">\n                    Entrance Monitoring System\n                </Cell>\n                <Cell area=\"form\">\n                    <form onSubmit={submitForm}>\n                        <TextField\n                            id=\"outlined-required\"\n                            label=\"Guest ID\"\n                            // defaultValue=\"Hello World\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            inputRef={inputRef}\n                            autoFocus\n                            disabled={sending}\n                            inputProps={{\n                                onBlur: focusLockHandler,\n                            }}\n                        />\n                        {/* <input ref={inputRef} autoFocus /> */}\n                    </form>\n                </Cell>\n                <Cell area=\"indicators\" className={classes.indicatorsCell}>\n                    <div>\n                        {\n                            /*offlineMode*/ JSON.parse(localStorage.getItem('guestsBacklog')) != null && JSON.parse(localStorage.getItem('guestsBacklog')).length > 0 ? (\n                                <div style={{fontSize: '2em'}}> נתונים לא שמורים ,אנא <span onClick={sendBacklog} className={classes.link}> שלח </span> <span id=\"testStorage\"> </span> <span onClick={() => document.getElementById('testStorage').innerHTML = localStorage.getItem('guestsBacklog')}> test </span> </div>\n                            ) : null\n                        }\n                    </div>\n                </Cell>\n                <Cell area=\"focusLock\" className={classes.focusLockCell}>\n                    Focus lock\n                    <Switch\n                        checked={focusLock}\n                        onChange={() => setFocusLock(!focusLock)}\n                        value=\"focusLock\"\n                        color=\"secondary\"\n                    />\n                </Cell>\n                <Cell area=\"hiddenSubmit\" onClick={submitForm}>\n\n                </Cell>\n                <Cell area=\"loader\" className={classes.gridCellCentered}>\n                    {\n                        error ?\n                            (\n                                <div style={{ color: 'red' }}> <ErrorOutlineIcon /> </div>\n                            )\n                            : null\n                    }\n                    {\n                        sending ?\n                            (\n                                <CircularProgress color=\"inherit\" />\n                            )\n                            : null\n                    }\n                    {\n                        success ?\n                            (\n                                <div style={{ color: `${offlineMode ? 'orange' : 'lime'}` }}>\n                                    <CheckCircleOutlineIcon />\n                                </div>\n                            )\n                            : null\n                    }\n                </Cell>\n            </Grid>\n\n        </React.Fragment>\n    );\n};\n\nexport default InputPage;","import React, { useState, useEffect } from 'react';\n\nimport { postData, SERVER_BASE_URL } from '../../utils/network';\n\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nconst ViewPage = () => {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        const fetchData = async () => {\n            if (!data) {\n                let response = await postData(`${SERVER_BASE_URL}/allGuests`);\n                setData(response.results);\n            }\n        };\n        fetchData();\n    });\n\n    return (\n        <div>\n            {\n                data ?\n                    <React.Fragment>\n                        <Link to=\"/client/\"> Add Guest </Link> <br />\n                        <Link to=\"/client/viewExpected\"> Expected </Link> <br />\n                        {/* <Link to=\"/extras\"> Unexpected Guests </Link> <br/> */}\n\n                        <br />\n\n                        <div>\n                            Total Guests: {data.length}\n                        </div>\n\n                        <ReactTable\n                            data={data}\n                            filterable\n                            defaultFilterMethod={(filter, row) =>\n                                String(row[filter.id]).includes(filter.value)}\n                            columns={[\n                                {\n                                    Header: \"DB Info\",\n                                    columns: [\n                                        {\n                                            Header: \"ID\",\n                                            accessor: \"id\"\n                                        },\n                                    ]\n                                },\n                                {\n                                    Header: \"Guest Info\",\n                                    columns: [\n                                        {\n                                            Header: \"Personal Number\",\n                                            accessor: \"guest_id\",\n                                            filterMethod: (filter, row) =>\n                                                row[filter.id].startsWith(filter.value)\n                                        },\n                                        {\n                                            Header: \"Name\",\n                                            accessor: \"guest_name\"\n                                        },\n                                        {\n                                            Header: \"Rank\",\n                                            accessor: \"rank\"\n                                        },\n                                        {\n                                            Header: \"Unit\",\n                                            accessor: \"unit\"\n                                        },\n                                    ]\n                                },\n                                {\n                                    Header: \"Arrival Info\",\n                                    columns: [\n                                        {\n                                            Header: \"Arrival Time\",\n                                            accessor: \"arrival_time\",\n                                            Cell: row => (\n                                                <span>\n                                                    {\n                                                        row.value ? new Date(row.value).toLocaleTimeString()\n                                                            : null\n                                                    }\n                                                </span>\n                                            )\n                                        },\n                                    ]\n                                },\n                            ]}\n                            defaultPageSize={10}\n                            className=\"-striped -highlight\"\n                        />\n                    </React.Fragment>\n                    : null\n            }\n        </div>\n    );\n};\n\nexport default ViewPage;","import React, { useState, useEffect } from 'react';\n\nimport { postData, SERVER_BASE_URL } from '../../utils/network';\n\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nconst ViewExpectedPage = () => {\n    const [data, setData] = useState(null);\n    const [expected, setExpected] = useState(null);\n    const [currentGuests, setCurrentGuests] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (!expected) {\n                let response = await postData(`${SERVER_BASE_URL}/allExpectedGuests`);\n                setExpected(response.results);\n            }\n        };\n        fetchData();\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (!currentGuests) {\n                let response = await postData(`${SERVER_BASE_URL}/allGuests`);\n                setCurrentGuests(response.results);\n            }\n        };\n        fetchData();\n    });\n\n    let temp;\n    if (expected && currentGuests && !data) {\n        let currentData = expected.map((g) => {\n            return {\n                ...g,\n                arrived: currentGuests.some((cg) => cg['guest_id'] === g['guest_id']),\n                arrival_time: (temp = currentGuests.find((cg) => g.guest_id === cg.guest_id)) != null ? temp.arrival_time : null,\n            };\n        });\n\n        setData(currentData);\n    }\n\n    return (\n        <div>\n            {\n                data ?\n                    <React.Fragment>\n                        <Link to=\"/client/\"> Add Guest </Link> <br />\n                        <Link to=\"/client/viewGuests\"> View Guests </Link> <br />\n                        {/* <Link to=\"/extras\"> Unexpected Guests </Link> <br /> */}\n\n                        <br />\n\n                        <div>\n                            Total Guests: {data.filter((g) => g.arrived).length} / {data.length}\n                        </div>\n\n                        <ReactTable\n                            data={data}\n                            filterable\n                            defaultFilterMethod={(filter, row) =>\n                                String(row[filter.id]).includes(filter.value)}\n                            columns={[\n                                {\n                                    Header: \"DB Info\",\n                                    columns: [\n                                        {\n                                            Header: \"ID\",\n                                            accessor: \"id\"\n                                        },\n                                    ]\n                                },\n                                {\n                                    Header: \"Guest Info\",\n                                    columns: [\n                                        {\n                                            Header: \"Personal Number\",\n                                            accessor: \"guest_id\",\n                                            filterMethod: (filter, row) =>\n                                                String(row[filter.id]).startsWith(filter.value)\n                                        },\n                                        {\n                                            Header: \"Name\",\n                                            accessor: \"guest_name\"\n                                        },\n                                        {\n                                            Header: \"Rank\",\n                                            accessor: \"rank\"\n                                        },\n                                        {\n                                            Header: \"Unit\",\n                                            accessor: \"unit\"\n                                        },\n                                        {\n                                            Header: \"Arrived\",\n                                            accessor: \"arrival_time\",\n                                            Cell: row => (\n                                                <span>\n                                                    <span style={{\n                                                        color: row.value ? '#57d500'\n                                                            : '#ff2e00',\n                                                    }}>\n                                                        &#x25cf;\n                                                  </span> {\n                                                        row.value ? 'Yes ' + new Date(row.value).toLocaleTimeString()\n                                                            : 'No'\n                                                    }\n                                                </span>\n                                            )\n                                        },\n                                    ]\n                                },\n                            ]}\n                            defaultPageSize={10}\n                            className=\"-striped -highlight\"\n                        />\n                    </React.Fragment>\n                    : null\n            }\n        </div>\n    );\n};\n\nexport default ViewExpectedPage;","import React, { useRef } from 'react';\nimport { postData, SERVER_BASE_URL } from '../../utils/network';\n\nconst LoginPage = ({ verify }) => {\n    let inputRef = useRef();\n    let submit = () => {\n        postData(`${SERVER_BASE_URL}/token`, { password: inputRef.current.value })\n            .then(() => verify());\n    };\n\n    return (\n        <div>\n            login\n\n            <form onSubmit={(e) => { e.preventDefault(); submit(); }}>\n                <input ref={inputRef} type=\"password\" />\n                <button type=\"submit\"> login </button>\n            </form>\n        </div>\n    );\n};\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  // Link\n} from \"react-router-dom\";\n\nimport InputPage from './components/InputPage/InputPage';\nimport ViewPage from './components/ViewPage/ViewPage';\nimport ViewExpectedPage from './components/ExpectedGuestsPage/ExpectedGuestsPage';\nimport LoginPage from './components/LoginPage/LoginPage';\nimport { SERVER_BASE_URL } from './utils/network';\n\nfunction App() {\n  const [verified, setVerified] = useState(false);\n\n  let verifyToken = async () => {\n    let result = await fetch(`${SERVER_BASE_URL}/verify`, {credentials: \"include\"});\n    if (result.status === 200)\n      setVerified(true);\n  };\n\n  if (!verified)\n    verifyToken();\n\n  if (!verified) {\n    return (\n      <LoginPage verify={verifyToken} />\n    );\n  }\n\n  return (\n    <Router>\n      <Route exact path=\"/client/\">\n        <InputPage />\n      </Route>\n      <Route exact path=\"/client/login\">\n        {\n          verified ? (<Redirect to=\"/client/\" />) : null\n        }\n        <LoginPage verify={verifyToken} />\n      </Route>\n      <Route exact path=\"/client/viewGuests\">\n        <ViewPage />\n      </Route>\n      <Route exact path=\"/client/viewExpected\">\n        <ViewExpectedPage />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}